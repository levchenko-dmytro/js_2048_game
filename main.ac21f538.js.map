{"version":3,"sources":["scripts/main.js"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","_typeof","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","_catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","o","minLen","_arrayLikeToArray","n","toString","Array","from","test","isArray","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","_createClass","protoProps","staticProps","_toPrimitive","String","input","hint","prim","toPrimitive","res","Number","Cell","gridElement","x","y","cell","document","createElement","classList","add","append","tile","setXY","linkedTile","linkedTileForMerge","newTile","isEmpty","hasTileForMerge","setValue","removeClassList","removeFromDOM","unlinkTileForMerge","getTileValue","gridSize","cellsCount","tileTwo","tileFour","chanceToGetOneOfTiles","Grid","cells","Math","floor","cellsGroupedByColumn","groupCellsByColumn","cellsGroupedByReversedColumn","map","column","cellsGroupedByRow","groupCellsByRow","cellsGroupedByReversedRow","row","emptyCells","filter","random","reduce","groupedCells","Tile","tileElement","style","setProperty","textContent","concat","remove","_this","addEventListener","once","scoreValue","scoreToWin","button","querySelector","score","messageStart","messageLose","messageWin","gameBoard","grid","startGame","setupInputOnce","getRandomEmptyCell","linkTile","removeEventListener","restartGame","unlinkTile","window","handleInput","_x","_handleInput","_callee","eventMove","_callee$","_context","t0","canMoveUp","moveUp","canMoveDown","moveDown","canMoveLeft","moveLeft","canMoveRight","moveRight","_moveUp","_callee2","_callee2$","_context2","slideTiles","_moveDown","_callee3","_callee3$","_context3","_moveLeft","_callee4","_callee4$","_context4","_moveRight","_callee5","_callee5$","_context5","_x2","_slideTiles","_callee6","promises","_callee6$","_context6","group","slideTilesInGroup","all","mergeTiles","getCellValue","cellWithTile","targetCell","j","canAccept","waitForTransitionEnd","linkTileForMerge","canMove","some","canMoveInGroup","index"],"mappings":"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","file":"main.ac21f538.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nclass Cell {\n  constructor(gridElement, x, y) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('cell');\n    gridElement.append(cell);\n    this.x = x;\n    this.y = y;\n  }\n\n  linkTile(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  unlinkTile() {\n    this.linkedTile = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  unlinkTileForMerge() {\n    this.linkedTileForMerge = null;\n  }\n\n  hasTileForMerge() {\n    return this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return this.isEmpty()\n      || (!this.hasTileForMerge() && this.linkedTile.value === newTile.value);\n  }\n\n  mergeTiles() {\n    this.linkedTile.setValue(this.linkedTile.value * 2);\n    this.linkedTile.removeClassList();\n    this.linkedTileForMerge.removeFromDOM();\n    this.unlinkTileForMerge();\n  }\n\n  getCellValue() {\n    return this.linkedTile ? this.linkedTile.getTileValue() : 0;\n  }\n}\n\nconst gridSize = 4;\nconst cellsCount = gridSize * gridSize;\nconst tileTwo = 2;\nconst tileFour = 4;\nconst chanceToGetOneOfTiles = 0.9;\n\nclass Grid {\n  constructor(gridElement) {\n    this.cells = [];\n\n    for (let i = 0; i < cellsCount; i++) {\n      this.cells.push(\n        new Cell(gridElement, i % gridSize, Math.floor(i / gridSize))\n      );\n    }\n\n    this.cellsGroupedByColumn = this.groupCellsByColumn();\n\n    this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn\n      .map(column => [...column].reverse());\n\n    this.cellsGroupedByRow = this.groupCellsByRow();\n\n    this.cellsGroupedByReversedRow = this.cellsGroupedByRow\n      .map(row => [...row].reverse());\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter(cell => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\n      groupedCells[cell.x][cell.y] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\n      groupedCells[cell.y][cell.x] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n}\n\nclass Tile {\n  constructor(gridElement) {\n    this.tileElement = document.createElement('div');\n    this.tileElement.classList.add('tile');\n\n    this.setValue(\n      Math.random() >= chanceToGetOneOfTiles ? tileFour : tileTwo\n    );\n    gridElement.append(this.tileElement);\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n    this.tileElement.style.setProperty('--x', x);\n    this.tileElement.style.setProperty('--y', y);\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.tileElement.textContent = this.value;\n    this.tileElement.classList.add(`tile--${value}`);\n  }\n\n  removeFromDOM() {\n    this.tileElement.remove();\n  }\n\n  removeClassList() {\n    this.tileElement.classList.remove(`tile--${this.value / 2}`);\n  }\n\n  getTileValue() {\n    return this.value;\n  }\n\n  waitForTransitionEnd() {\n    return new Promise(resolve => {\n      this.tileElement.addEventListener(\n        'transitionend',\n        resolve,\n        { once: true }\n      );\n    });\n  }\n}\n\nlet scoreValue = 0;\nconst scoreToWin = 2048;\nconst button = document.querySelector('.button');\nconst score = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst gameBoard = document.querySelector('.game-board');\nconst grid = new Grid(gameBoard);\n\nbutton.addEventListener('click', startGame);\n\nfunction startGame() {\n  setupInputOnce();\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n\n  messageStart.classList.add('hidden');\n  button.classList.remove('start');\n  button.classList.add('restart');\n  button.textContent = 'Restart';\n\n  button.removeEventListener('click', startGame);\n  button.addEventListener('click', restartGame);\n}\n\nfunction restartGame() {\n  grid.cells.forEach(cell => {\n    if (!cell.isEmpty()) {\n      cell.linkedTile.removeFromDOM();\n      cell.unlinkTile();\n    }\n  });\n\n  scoreValue = 0;\n  score.textContent = scoreValue;\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n  setupInputOnce();\n}\n\nfunction setupInputOnce() {\n  window.addEventListener('keydown', handleInput, { once: true });\n}\n\nasync function handleInput(eventMove) {\n  switch (eventMove.key) {\n    case 'ArrowUp':\n      if (!canMoveUp()) {\n        setupInputOnce();\n\n        return;\n      }\n      await moveUp();\n      break;\n\n    case 'ArrowDown':\n      if (!canMoveDown()) {\n        setupInputOnce();\n\n        return;\n      }\n      await moveDown();\n      break;\n\n    case 'ArrowLeft':\n      if (!canMoveLeft()) {\n        setupInputOnce();\n\n        return;\n      }\n      await moveLeft();\n      break;\n\n    case 'ArrowRight':\n      if (!canMoveRight()) {\n        setupInputOnce();\n\n        return;\n      }\n      await moveRight();\n      break;\n\n    default:\n      setupInputOnce();\n\n      return;\n  }\n\n  const newTile = new Tile(gameBoard);\n\n  grid.getRandomEmptyCell().linkTile(newTile);\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    messageLose.classList.remove('hidden');\n  }\n\n  setupInputOnce();\n}\n\nasync function moveUp() {\n  await slideTiles(grid.cellsGroupedByColumn);\n}\n\nasync function moveDown() {\n  await slideTiles(grid.cellsGroupedByReversedColumn);\n}\n\nasync function moveLeft() {\n  await slideTiles(grid.cellsGroupedByRow);\n}\n\nasync function moveRight() {\n  await slideTiles(grid.cellsGroupedByReversedRow);\n}\n\nasync function slideTiles(groupedCells) {\n  const promises = [];\n\n  groupedCells.forEach(group => slideTilesInGroup(group, promises));\n\n  await Promise.all(promises);\n\n  grid.cells.forEach(cell => {\n    if (cell.hasTileForMerge()) {\n      cell.mergeTiles();\n      scoreValue += cell.getCellValue();\n      score.textContent = scoreValue;\n    }\n\n    if (cell.getCellValue() === scoreToWin) {\n      messageWin.classList.remove('hidden');\n    }\n  });\n}\n\nfunction slideTilesInGroup(group, promises) {\n  for (let i = 1; i < group.length; i++) {\n    if (group[i].isEmpty()) {\n      continue;\n    }\n\n    const cellWithTile = group[i];\n    let targetCell;\n    let j = i - 1;\n\n    while (j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\n      targetCell = group[j];\n      j--;\n    }\n\n    if (!targetCell) {\n      continue;\n    }\n\n    promises.push(cellWithTile.linkedTile.waitForTransitionEnd());\n\n    if (targetCell.isEmpty()) {\n      targetCell.linkTile(cellWithTile.linkedTile);\n    } else {\n      targetCell.linkTileForMerge(cellWithTile.linkedTile);\n    }\n\n    cellWithTile.unlinkTile();\n  }\n}\n\nfunction canMoveUp() {\n  return canMove(grid.cellsGroupedByColumn);\n}\n\nfunction canMoveDown() {\n  return canMove(grid.cellsGroupedByReversedColumn);\n}\n\nfunction canMoveLeft() {\n  return canMove(grid.cellsGroupedByRow);\n}\n\nfunction canMoveRight() {\n  return canMove(grid.cellsGroupedByReversedRow);\n}\n\nfunction canMove(groupedCells) {\n  return groupedCells.some(group => canMoveInGroup(group));\n}\n\nfunction canMoveInGroup(group) {\n  return group.some((cell, index) => {\n    if (!index || cell.isEmpty()) {\n      return false;\n    }\n\n    const targetCell = group[index - 1];\n\n    return targetCell.canAccept(cell.linkedTile);\n  });\n}\n"]}